{"version":3,"sources":["webpack:///./src/pages/react-hooks-useState-versus-useReducer.js"],"names":["Entry","title","class","style","fontStyle","href"],"mappings":"2FAAA,wDAiXeA,UA7WD,WACZ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,6CACX,wEACA,6BACA,8VAOA,gJAE2C,0CAF3C,qFAKA,sXAOA,yBAAKC,MAAM,gBACT,0BAAMA,MAAM,gBAAZ,67BAgCF,yDAC6B,0CAD7B,4GAGkB,4CAHlB,kDAIiB,4CAJjB,2LAOe,0BAAMC,MAAO,CAAEC,UAAW,WAA1B,QAPf,+CAUA,sIAEkC,0CAFlC,4HAIiC,0CAJjC,KAMA,yBAAKF,MAAM,gBACT,0BAAMA,MAAM,gBAAZ,i2BA6CF,sQAMA,qLAKA,yBAAKA,MAAM,gBACT,0BAAMA,MAAM,gBAAZ,yWAqBF,iMAG8B,4CAH9B,8BAMA,yBAAKA,MAAM,gBACT,0BAAMA,MAAM,gBAAZ,koBAkCF,uDACA,wCACA,kFACA,mHAEiB,8CAFjB,oBAE4D,IAC1D,0CAHF,sJAOA,yBAAKA,MAAM,gBACT,0BAAMA,MAAM,gBAAZ,ybA6BF,wHAEsB,0CAFtB,sBAE+D,IAC7D,4CAHF,kVAUA,uFACA,yBAAKA,MAAM,gBACT,0BAAMA,MAAM,gBAAZ,qgBA+BF,uNAKA,iGACsE,IACpE,0CAFF,iDAEsE,IACpE,4CAHF,sGAMA,yBAAKA,MAAM,gBACT,0BAAMA,MAAM,gBAAZ,y4CA4DF,sSAMA,6BACA,oHAEsB,IACpB,uBAAGG,KAAK,+BAAR,mBAHF","file":"component---src-pages-react-hooks-use-state-versus-use-reducer-js-a0c9e7a0e68d53db97db.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst Entry = () => {\n  return (\n    <Layout>\n      <SEO title=\"React Hooks - useState versus useReducer\" />\n      <h1>React Hooks - useState versus useReducer</h1>\n      <hr />\n      <p>\n        Like many a React developer who preferred function components to\n        classes, I was excited to begin implementing React Hooks upon their\n        release in early 2019. Upon reflection of over a year spent consistently\n        writing stateful function components, much has changed in my philosophy\n        on how I approach such an implementation.\n      </p>\n      <p>\n        My first attemps were quite inelegant. I began building a component, and\n        when I needed a state variable, I called <code>useState</code>. When I\n        needed a second state variable, I called it again. And again. And again.\n      </p>\n      <p>\n        Let's take the example of a registration form with numerous controlled\n        inputs and a modal that appears on a certain user action (maybe their\n        password is invalid). Let's say we also have a toggle that allows the\n        user to switch the form between light mode and dark mode. After a while,\n        the top of such a component often begins to look like this:\n      </p>\n      <pre class=\"language-jsx\">\n        <code class=\"language-jsx\">\n          {`import React, { useState } from 'react';\nimport Modal from 'some-modal-library';\nimport Toggle from '../Toggle';\n\nconst MyForm = () => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [modalVisible, setModalVisibility] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  \n  return (\n    <div className={darkMode ? 'dark' : 'light}>\n     <Toggle onToggle={setDarkMode(!darkMode)} />\n      <form>\n        <label>First Name</label>\n        <input type=\"text\" onChange={e => setFirstName(e.target.value)} value={firstName} />\n        // ...\n      </form>\n      <Modal open={modalVisible}>\n        Password must contain at least one number and one letter\n      </Modal>\n    </div>\n  )\n}\n\nexport default MyForm;`}\n        </code>\n      </pre>\n      <p>\n        \"This is too many calls to <code>useState</code>; the top of my\n        component is cluttered and repetitive,\" I would decide. \"Time to convert\n        this to use the <code>useReducer</code> hook.\" Although I often end up\n        preferring the <code>useReducer</code> hook, my reasoning has evolved,\n        and the false dichotomy I had created about being forced to choose\n        between the two has shifted into a new and better understanding: often\n        times, using <span style={{ fontStyle: \"italic\" }}>both</span> hooks in\n        one component is the best answer.\n      </p>\n      <p>\n        Let's again look at our registration form with a modal. Armed with our\n        philosophy of \"combine multiple <code>useState</code> calls when we've\n        exceeded an arbitrary number of them\", we proceed with refactoring our\n        component to no longer require <code>useState</code>.\n      </p>\n      <pre class=\"language-jsx\">\n        <code class=\"language-jsx\">\n          {`import React, { useReducer } from 'react';\nimport Modal from 'some-modal-library';\nimport Toggle from '../Toggle';\n\nconst initialState = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  username: '',\n  password: '',\n  modalVisible: false,\n  darkMode: false\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'set first name':\n      return {\n        ...state,\n        firstName: action.payload\n      };\n    // ...  \n    default: \n      return state;\n  }\n}\n\nconst MyForm = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  \n  return (\n    // ...\n    <input \n      type=\"text\" \n      onChange={\n        e => dispatch({ type: 'set first name', payload: e.target.value })\n      }\n      value={state.firstName}\n    />\n    // ...\n    <Modal open={state.modalVisible}>\n    // ...`}\n        </code>\n      </pre>\n      <p>\n        Okay; we refactored some things. Did we improve our component? By which\n        metric did we improve or get worse? The answer becomes clearer when we\n        begin to modify our component (or, better yet, when a teammate goes to\n        modify it later).\n      </p>\n      <p>\n        A teammate is given this component and asked to add a Reset button to\n        the form. If provided the first version, the result would likely look\n        like this:\n      </p>\n      <pre class=\"language-jsx\">\n        <code class=\"language-jsx\">\n          {`import React, { useState } from 'react';\nimport Modal from 'some-modal-library';\n\nconst MyForm = () => {\n  // ...\n  const onResetClick = () => {\n    setFirstName('');\n    setLastName('');\n    setEmail('');\n    setUsername('');\n    setPassword('');\n  }\n\n  return (\n    // ...\n    <button onClick={onResetClick}>Reset</button>\n    // ...\n  )`}\n        </code>\n      </pre>\n      <p>\n        That looks rather suboptimal. Wouldn't it be nice if we could batch\n        those calls to set fields into a single command? Naturally, that's\n        exactly what we do with the <code>useReducer</code> version of the\n        component:\n      </p>\n      <pre class=\"language-jsx\">\n        <code class=\"language-jsx\">\n          {`import React, { useReducer } from 'react';\nimport Modal from 'some-modal-library';\nimport Toggle from '../Toggle';\n\nconst initialState = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  username: '',\n  password: '',\n  modalVisible: false,\n  darkMode: false\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    // ...\n    case 'reset form':\n      return {\n        ...initialState\n      }\n    // ...\n  }\n}\n\nconst MyForm = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  \n  return (\n    // ...\n    <button onClick={() => dispatch({ type: 'reset form' })}>Reset</button>`}\n        </code>\n      </pre>\n      <p>Great! Thanks, teammate!</p>\n      <p>Except...</p>\n      <p>Now you've reset the form to light mode. :facepalm:</p>\n      <p>\n        Perhaps I'm not giving this imaginary teammate enough credit. Perhaps\n        they looked at <code>initialState</code> and saw that the{\" \"}\n        <code>darkMode</code> boolean was included (not to mention the modal\n        visibility boolean). In that case, they may have written their reducer\n        solution to look like this:\n      </p>\n      <pre class=\"language-jsx\">\n        <code class=\"language-jsx\">\n          {`// ...\nconst initialState = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  username: '',\n  password: '',\n  modalVisible: false,\n  darkMode: false\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    // ...\n    case 'reset form':\n      return {\n        ...state,\n        firstName: '',\n        lastName: '',\n        email: '',\n        username: '',\n        password: ''\n      }\n    // ...\n  }\n}`}\n        </code>\n      </pre>\n      <p>\n        This brings us back to our question: did we make our component better\n        when we moved every <code>useState</code> call into a single{\" \"}\n        <code>useReducer</code>? I would posit that we have not. We've simply\n        moved the verbosity from the top of the component to the state/reducer\n        portion of our file. Additionally, we're mixing concerns. The form\n        inputs' contents need not know the color scheme of the page and vice\n        versa (nor is the visibility of the modal inherently tied to the form's\n        values).\n      </p>\n      <p>A clever developer might suggest this as an alternative:</p>\n      <pre class=\"language-jsx\">\n        <code class=\"language-jsx\">\n          {`// ...\nconst initialFormState = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  username: '',\n  password: '',\n}\n\nconst initialNonFormState = {\n  modalVisible: false,\n  darkMode: false\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    // ...\n    case 'reset form':\n      return {\n        ...state,\n        ...initialFormState\n      }\n    // ...\n  }\n\n  // ...\n  const [state, dispatch] = useReducer(reducer, { ...initialFormState, ...initialNonFormState })\n          `}\n        </code>\n      </pre>\n      <p>\n        Clever as this may be, we're still mixing concerns and not giving a\n        person new to this component the best chance of understanding the\n        functionality with the least amount of difficulty.\n      </p>\n      <p>\n        Let us finally arrive at what I believe to be the optimal solution:{\" \"}\n        <code>useState</code> for singleton state variables combined with a{\" \"}\n        <code>useReducer</code> for state variables that are associated with one\n        another or dependant on one another in some way.\n      </p>\n      <pre class=\"language-jsx\">\n        <code class=\"language-jsx\">\n          {`import React, { useState, useReducer } from 'react';\nimport Modal from 'some-modal-library';\nimport Toggle from '../Toggle';\n\nconst initialFormState = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  username: '',\n  password: ''\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'set first name':\n      return {\n        ...state,\n        firstName: action.payload\n      };\n    case 'reset form':\n      return {\n        ...initialFormState\n      }\n    // ...\n    default: \n      return state;\n  }\n}\n\nconst MyForm = () => {\n  const [formState, dispatch] = useReducer(reducer, initialFormState);\n  const [darkMode, setDarkMode] = useState(false);\n  const [modalVisible, setModalVisibilitiy] = useState(false);\n  \n  return (\n    <div className={darkMode ? 'dark' : 'light}>\n     <Toggle onToggle={setDarkMode(!darkMode)} />\n      <form>\n        <label>First Name</label>\n        <input \n          type=\"text\" \n          onChange={\n            e => dispatch({ type: 'set first name', payload: e.target.value })\n          }\n          value={formState.firstName}\n        />\n        // ...\n        <button onClick={() => dispatch({ type: 'reset form' })}>Reset</button>\n      </form>\n      <Modal open={modalVisible}>\n        Password must contain at least one number and one letter\n      </Modal>\n    </div>\n  )\n}\n\nexport default MyForm;`}\n        </code>\n      </pre>\n      <p>\n        Your average React developer who has worked with Hooks even a little\n        will likely grasp this component and be able to add functionality or\n        debug issues with much less difficulty than any of the previous examples\n        (and less likelihood of adding new bugs themselves).\n      </p>\n      <hr />\n      <p>\n        Do you agree? Disagree? Do you have an even better approach that I\n        haven't discovered?{\" \"}\n        <a href=\"mailto:marc.gray@graybox.co\">Drop me a line.</a> :)\n      </p>\n    </Layout>\n  )\n}\n\nexport default Entry\n"],"sourceRoot":""}